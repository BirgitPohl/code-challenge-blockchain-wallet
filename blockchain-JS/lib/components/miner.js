"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Miner = void 0;

var fs = require('fs');

var path = require('path');

var {
  Blockchain,
  Transaction
} = require('./blockchain');

var EC = require('elliptic').ec;

var ec = new EC('secp256k1');
/**
 * Minacoin Transaction Manager
 * @class Miner
 * @access public
 * @property {string} myWalletAddress
 * @property {ec.Keypair} myKey
 * @property {string} theirWalletAddress
 * @property {Blockchain} minaCoin
 * @method getCycles
 * @method sendTransaction
 * @method getLatestBlock
 * @method getTheirBalance
 * @method initTransactions
 */

class Miner {
  constructor() {
    var myKey = ec.keyFromPrivate('874721b0cfd73d79c76c50d5b2ee59f7d9fe9c5743bc45c015c713903b46b7c4');
    this.myWalletAddress = myKey.getPublic('hex');
    this.myKey = myKey;
    var key = ec.genKeyPair().getPublic().encode('hex'); // generates a random key:

    var theirKey = ec.keyFromPrivate(key);
    this.theirWalletAddress = theirKey.getPublic('hex');
    this.minaCoin = new Blockchain();
  }
  /**
   * @summary Gets cycles from files in JSON format
   */


  getCycles() {
    try {
      var folderName = '../data/';
      return fs.readdirSync(folderName).map(file => {
        return require(path.resolve(folderName, file))['cycle'];
      });
    } catch (err) {
      // TODO Here could be a logger
      console.log('Getting cycles failed ' + err);
      return null;
    }
  }
  /**
   * @summary Sends a transaction
   * @param payload contains a string of a cycle
   * @fires sendTransaction
   * @fires Transaction.signTransaction
   * @fires minaCoin.addTransaction
   * @return undefined
   */


  sendTransaction(payload) {
    if (payload === undefined || payload === '') {
      throw new Error('Payload is not defined');
    }

    var tx1 = new Transaction(this.myWalletAddress, this.theirWalletAddress, 10, payload);
    tx1.signTransaction(this.myKey);
    this.minaCoin.addTransaction(tx1);
  }
  /**
   * @summary Gets the latest Block
   * @return Block
   */


  getLatestBlock() {
    return this.minaCoin.getLatestBlock();
  }
  /**
   * @summary Gets user's balance
   * @return number
   */


  getMyBalance() {
    return this.minaCoin.getBalanceOfAddress(this.myWalletAddress);
  }
  /**
  * @summary Gets other user's balance
  * @return number
  */


  getTheirBalance() {
    return this.minaCoin.getBalanceOfAddress(this.theirWalletAddress);
  }
  /*  */


  getData() {
    return {
      theirBalance: this.getTheirBalance(),
      myBalance: this.getMyBalance(),
      latestBlock: this.getLatestBlock()
    };
  }
  /**
   * @summary Initiates transaction
   * @fires getCycles
   * @fires sendTransaction
   * @fires minaCoin.minePendingTransactions
   * @return undefined
   */


  initTransactions() {
    var cycles = this.getCycles();

    for (var index = 0; index < cycles.length; index++) {
      var cycle = cycles[index];
      this.sendTransaction(cycle);
    }

    console.log('Starting the miner');
    this.minaCoin.minePendingTransactions(this.myWalletAddress);
  }

} //module.exports.Miner = Miner;


exports.Miner = Miner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,